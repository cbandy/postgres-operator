package pgo_cli_test

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/crunchydata/postgres-operator/testing/kubeapi"
	"github.com/stretchr/testify/require"
)

func TestCommandLine(t *testing.T) {
	{
		config, err := kubeapi.NewConfig()
		require.NoError(t, err)

		// Nothing's gonna stop us now.
		config.QPS = 1000.0
		config.Burst = 2000.0

		TestContext.Kubernetes, err = kubeapi.NewForConfig(config)
		require.NoError(t, err)
	}

	TestContext.DefaultEnvironment = []string{
		"PGO_APISERVER_URL=https://localhost:8443",
		"PGOUSERNAME=admin",
		"PGOUSERPASS=insecure",
	}

	// By default, use a port-forward proxy to talk to the Operator.
	if url := os.Getenv("PGO_APISERVER_URL"); url == "" {
		if ns := os.Getenv("PGO_OPERATOR_NAMESPACE"); ns != "" {
			pods, err := TestContext.Kubernetes.ListPods(ns, map[string]string{"name": "postgres-operator"})
			require.NoError(t, err)
			require.NotEmpty(t, pods)

			port := "8443"
			for _, c := range pods[0].Spec.Containers {
				if c.Name == "apiserver" {
					require.NotEmpty(t, c.Ports)
					port = fmt.Sprintf("%d", c.Ports[0].ContainerPort)
				}
			}

			proxy, err := TestContext.Kubernetes.PodPortForward(pods[0].Namespace, pods[0].Name, port)
			require.NoError(t, err)
			defer proxy.Close()

			TestContext.DefaultEnvironment = append(TestContext.DefaultEnvironment,
				"PGO_APISERVER_URL=https://"+proxy.LocalAddr(),
			)
		}
	}

	// By default, use files that are generated by the Ansible installer.
	if ns := os.Getenv("PGO_OPERATOR_NAMESPACE"); ns != "" {
		if home, err := os.UserHomeDir(); err == nil {
			TestContext.DefaultEnvironment = append(TestContext.DefaultEnvironment,
				"PGO_CA_CERT="+filepath.Join(home, ".pgo", ns, "output", "server.crt"),
				"PGO_CLIENT_CERT="+filepath.Join(home, ".pgo", ns, "output", "server.crt"),
				"PGO_CLIENT_KEY="+filepath.Join(home, ".pgo", ns, "output", "server.pem"),
			)
		}
	}

	for name, tests := range TestContext.tests {
		t.Run(name, func(t *testing.T) {
			for _, test := range tests {
				t.Run("", test)
			}
		})
	}
}

var TestContext struct {
	// DefaultEnvironment specifies environment variables to be passed to every
	// executed process. Each entry is of the form "key=value", and values in
	// os.Environ() take precedence. See https://golang.org/pkg/os/exec/#Cmd.
	DefaultEnvironment []string

	// Kubernetes is a FIXME
	Kubernetes *kubeapi.KubeAPI

	tests map[string][]func(*testing.T)
}

// describe adds another test or group of tests to the suite.
func describe(name string, test func(*testing.T)) struct{} {
	if TestContext.tests == nil {
		TestContext.tests = make(map[string][]func(*testing.T))
	}
	TestContext.tests[name] = append(TestContext.tests[name], test)
	return struct{}{}
}
